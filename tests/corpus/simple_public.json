{"root":"0:0:1772","crate_version":null,"includes_private":false,"index":{"2:12737:27422":{"id":"2:12737:27422","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:18980":{"id":"2:12780:18980","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:35724:197","prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12858:20655":{"id":"2:12858:20655","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1772":{"id":"0:0:1772","crate_id":0,"name":"simple_public","span":{"filename":"simple_public.rs","begin":[1,0],"end":[1,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3:1771"],"is_stripped":false}}},"2:12799:19468":{"id":"2:12799:19468","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756","str::rsplitn":"2:12802:19470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:37804:6745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:19427":{"id":"2:12749:19427","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:35724:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:25126":{"id":"2:12763:25126","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12762:25121"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:37983:6758","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12805:19472":{"id":"2:12805:19472","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:19181":{"id":"2:12837:19181","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:27445":{"id":"2:12862:27445","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4671:27445"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:37999:6767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:19426":{"id":"2:12747:19426","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:35724:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:27442":{"id":"2:12846:27442","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:28120":{"id":"5:5540:28120","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12787:19464":{"id":"2:12787:19464","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12259:6747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:19006":{"id":"2:12761:19006","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:37686:2330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:25131":{"id":"2:12759:25131","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:37670:6763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12765:27428":{"id":"2:12765:27428","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:37964:6770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:19474":{"id":"2:12767:19474","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:27436":{"id":"2:12827:27436","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:27437":{"id":"2:12829:27437","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:28121":{"id":"5:5543:28121","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:28119","5:5537:7105","5:5540:28120","5:5543:28121","5:5551:28122","5:5552:28123","5:5553:2355","5:5554:20837","5:5555:20838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12784:19462":{"id":"2:12784:19462","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::split_whitespace":"2:12762:25121","str::rsplit":"2:12790:19466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:37700:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12736:19410":{"id":"2:12736:19410","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:20651":{"id":"2:12855:20651","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:33668:20788","Self::is_ascii":"2:12854:20650"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:33668:20788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:27425":{"id":"2:12744:27425","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:27441":{"id":"2:12843:27441","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:19473":{"id":"2:12808:19473","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:20654":{"id":"2:12857:20654","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12817:27432":{"id":"2:12817:27432","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::rmatch_indices":"2:12820:27433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:37850:6771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12802:19470":{"id":"2:12802:19470","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:451","str::splitn":"2:12799:19468","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:37822:6743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:18979":{"id":"2:12776:18979","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:35724:197","prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:19430":{"id":"2:12746:19430","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12770:19475":{"id":"2:12770:19475","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12796:27430":{"id":"2:12796:27430","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12443:6756","str::split":"2:12784:19462","prim@char":"1:12033:451","str::split_terminator":"2:12793:27429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:37768:6775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:23190":{"id":"2:12764:23190","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:37954:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:20650":{"id":"2:12854:20650","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:27446":{"id":"2:12865:27446","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4669:27446"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:38017:6768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:27443":{"id":"2:12849:27443","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:27440":{"id":"2:12834:27440","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:19455":{"id":"2:12758:19455","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12757:19454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:20837":{"id":"5:5554:20837","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12857:20654"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:20653":{"id":"2:12856:20653","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12762:25121":{"id":"2:12762:25121","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12763:25126"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:37974:6759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:20657":{"id":"2:12859:20657","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:31783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12825:27435":{"id":"2:12825:27435","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:25132":{"id":"2:12766:25132","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:37992:6757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:19476":{"id":"2:12773:19476","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12734":{"id":"2:12734","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12735:873","2:12736:19410","2:12737:27422","2:12738:27423","2:12740:27424","2:12743:20834","2:12744:27425","2:12745:339","2:12746:19430","2:12747:19426","2:12749:19427","2:12751:19428","2:12753:19429","2:12755:27426","2:12756:27427","2:12757:19454","2:12758:19455","2:12759:25131","2:12760:25599","2:12761:19006","2:12762:25121","2:12763:25126","2:12764:23190","2:12765:27428","2:12766:25132","2:12767:19474","2:12770:19475","2:12773:19476","2:12776:18979","2:12780:18980","2:12784:19462","2:12787:19464","2:12790:19466","2:12793:27429","2:12796:27430","2:12799:19468","2:12802:19470","2:12805:19472","2:12808:19473","2:12811:2003","2:12814:27431","2:12817:27432","2:12820:27433","2:12823:27434","2:12825:27435","2:12827:27436","2:12829:27437","2:12830:27438","2:12831:27439","2:12834:27440","2:12837:19181","2:12840:19477","2:12843:27441","2:12846:27442","2:12849:27443","2:12852:27444","2:12854:20650","2:12855:20651","2:12856:20653","2:12857:20654","2:12858:20655","2:12859:20657","2:12860:20658","2:12861:20659","2:12862:27445","2:12864:2119","2:12865:27446"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12830:27438":{"id":"2:12830:27438","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:7105":{"id":"5:5537:7105","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:2355":{"id":"5:5553:2355","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12735:873":{"id":"2:12735:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12753:19429":{"id":"2:12753:19429","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:27426":{"id":"2:12755:27426","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1536","str::slice_mut_unchecked":"2:12756:27427","crate::ops::Index":"2:33299:2202"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12823:27434":{"id":"2:12823:27434","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:2003":{"id":"2:12811:2003","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::rmatches":"2:12814:27431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:37904:6773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:1771":{"id":"0:3:1771","crate_id":0,"name":"Public","span":{"filename":"simple_public.rs","begin":[1,0],"end":[1,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"5:5536:28119":{"id":"5:5536:28119","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2034","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2034","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:339":{"id":"2:12745:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12746:19430","`u8`":"1:12050:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:19466":{"id":"2:12790:19466","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::split":"2:12784:19462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:37718:6741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:25599":{"id":"2:12760:25599","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:37676:6762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12751:19428":{"id":"2:12751:19428","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10532:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:27424":{"id":"2:12740:27424","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12738:27423"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12860:20658":{"id":"2:12860:20658","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:31783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:20659":{"id":"2:12861:20659","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:31783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:27427":{"id":"2:12756:27427","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1536","crate::ops::IndexMut":"2:3162:2203","str::slice_unchecked":"2:12755:27426"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:20834":{"id":"2:12743:20834","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11998:6760"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:19454":{"id":"2:12757:19454","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12758:19455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:2119":{"id":"2:12864:2119","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4672:2119"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:38008:2120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:27431":{"id":"2:12814:27431","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::matches":"2:12811:2003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:37922:6774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:27433":{"id":"2:12820:27433","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12443:6756","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12033:451","str::match_indices":"2:12817:27432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:37868:6772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12852:27444":{"id":"2:12852:27444","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12404:133","`FromStr`":"2:12403:2496"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:35869:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12403:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12403:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:28122":{"id":"5:5551:28122","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12738:27423":{"id":"2:12738:27423","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:28123":{"id":"5:5552:28123","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2034","`String`":"5:7535:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2034","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:27439":{"id":"2:12831:27439","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12468:6751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:19477":{"id":"2:12840:19477","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:451","self::pattern":"2:12443:6756"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:35722:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:6753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12793:27429":{"id":"2:12793:27429","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12443:6756","str::split":"2:12784:19462","prim@char":"1:12033:451","`DoubleEndedIterator`":"2:7827:127","str::rsplit_terminator":"2:12796:27430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:37750:6776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:6752","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:20838":{"id":"5:5555:20838","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12858:20655"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6844:14395":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:4462:13965":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8072:14435":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6162:21630":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3930:2392":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:44189:3541":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x4_t"],"kind":"struct"},"1:6426:2534":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44285:3550":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x16_t"],"kind":"struct"},"2:12185:7281":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:44436:3561":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x8x2_t"],"kind":"struct"},"17:9624:14491":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:33420:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15747:18796":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:44361:3554":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x8_t"],"kind":"struct"},"6:4915:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3443:2292":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:15184:18753":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:46115:2667":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9730:14521":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13056:14822":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"3:236:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11469:14662":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:7732:2130":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7269:30084":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:16942:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:5392:6714":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:1107:13329":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12850:14549":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11476:13324":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:34726:7087":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44745:3592":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x4x3_t"],"kind":"struct"},"6:605:8007":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12033:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:6983:23361":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4432:11507":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:7151:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","stack_t"],"kind":"struct"},"6:6102:12258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14122:17992":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:36196:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:45145:3632":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x2x4_t"],"kind":"struct"},"6:5020:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:34420:7074":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:35920:2150":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:7413:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7015:14403":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:36393:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7502:11752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:9015:19183":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:4309:6709":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:34572:7070":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:1692:2312":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:14916:26990":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2321:13416":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:16880:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4915:2458":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:3196:28324":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:34069:2120":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:33495:6831":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13676:14726":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12701:14502":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7668:2103":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6017:14362":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:903:2149":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5963:14359":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:2569:2145":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:1896:2155":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:5632:2544":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9968:14527":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15519:18779":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:34199:6876":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:4569:2450":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11517:2378":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9275:2225":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:38470:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7549:6796":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:15321:18767":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11314:2516":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:37624:6739":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:3373:6676":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13297:17466":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:46069:2611":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:10768:2285":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11088:14573":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:37595:6737":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:26220:7095":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11168:14597":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:11560:6728":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10657:14537":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11001:14571":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:44331:3552":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x8_t"],"kind":"struct"},"17:15133:18750":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:34523:7082":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10945:19051":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8146:2359":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:51937:3633":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x1_t"],"kind":"struct"},"2:2942:6675":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:19882:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:37974:6759":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:10676:2149":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:5825:2133":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:4889:14080":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11159:2511":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12572:14784":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6041:14363":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:10845:6748":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4872:11551":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:14877:6895":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:1582:13332":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:9035:14405":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7884:14433":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4460:6850":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"18:410:18996":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8281:2429":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8137:2357":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:1556:2169":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8300:2377":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:34312:2265":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:36875:6686":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:38443:7268":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:47565:2648":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:3687:28250":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4891:11554":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:909:2156":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7339:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:4958:2360":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:7855:2289":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:3065:13446":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1635:8903":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:8291:26722":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5866:14356":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6167:29429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:7503:14412":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:504:2090":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8169:2295":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:16419:2385":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2622:2333":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:2124:2164":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:555:18988":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:4745:14056":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8213:2331":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:3315:13448":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44485:3566":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x16x4_t"],"kind":"struct"},"16:7621:14421":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:35912:2149":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4554:11519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:36798:25720":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4970:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:790:2172":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:26250:6674":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:34379:2328":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11817:20934":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7694:14424":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11576:14665":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:830:2173":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:46629:2600":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:44845:3602":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x4x4_t"],"kind":"struct"},"6:4814:11544":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11235:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:16049:18948":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:12077:14751":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10207:14530":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:14914:26985":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:3343:2155":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4491:2433":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5049:14120":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:6351:2731":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11666:14671":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:6013:7592":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:37964:6770":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7282:25098":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2205:2267":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10739:2461":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:37290:25194":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:11477:2379":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2359:13418":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:546:18987":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:471:30941":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3278:2348":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14021:17987":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:9356:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:15:2006":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:1903:2168":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:15037:18741":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7360:30131":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:34480:7088":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:15781:2720":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15108:18747":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2526:13425":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:16032:18947":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:7768:14428":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7423:2145":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44229:3545":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x2_t"],"kind":"struct"},"2:36530:6687":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11294:14609":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13832:17974":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5860:12179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5982:14360":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12684:14501":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:811:2155":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:8157:2291":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15493:18777":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12345:14762":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:17004:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9678:14506":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12474:14537":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:45945:2652":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11536:14634":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:875:2162":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13083:14823":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:37718:6741":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:16076:18950":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:12468:6751":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2368:2276":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6742:13358":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10950:14587":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:45135:3631":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x2x3_t"],"kind":"struct"},"17:10608:14536":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15049:18742":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4626:11528":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4999:11566":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3735:2378":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4786:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11507:14658":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:9475:2288":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:6110:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:36432:2529":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:11001:6744":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4899:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:12259:6747":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"14:31:13340":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3394:2312":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:44805:3598":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x2x3_t"],"kind":"struct"},"1:8454:2490":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13633:17964":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:37868:6772":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:27305:2582":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:15212:18756":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:12443:6756":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:1051:2166":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15125:18749":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:14324:18006":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:532:7998":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5568:2506":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:637:2124":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:27965:7124":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:5388:6713":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:634:28313":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4537:11517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:15140:2296":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:9543:26786":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:33481:6823":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6294:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13145:17457":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:38308:6777":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:35682:2373":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:15374:18773":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13516:17482":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44376:3555":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x4_t"],"kind":"struct"},"16:2969:13443":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:2907:13441":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10474:21628":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:35861:2107":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14296:18004":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:12057:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:36770:25740":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6243:14367":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8237:2368":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:44995:3617":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x1x4_t"],"kind":"struct"},"2:37532:6732":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7663:2101":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:38419:7270":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4744:2411":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:113:18971":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5959:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5743:14352":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4885:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6190:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12459:14577":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44736:3591":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x4x2_t"],"kind":"struct"},"2:34166:6767":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:38616:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:5142:11581":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:4417:13944":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:15161:2587":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:15148:2590":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"10:0:1890":{"crate_id":10,"path":["adler"],"kind":"module"},"1:1545:2155":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:867:2152":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4845:11548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:38223:6790":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13121:17456":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:10522:2296":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6980:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","flock"],"kind":"struct"},"2:33442:2139":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:0:1896":{"crate_id":17,"path":["object"],"kind":"module"},"11:351:29638":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:38260:6791":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:361:18992":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:34323:2264":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4180:2426":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:36313:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU128"],"kind":"struct"},"16:6968:14401":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15612:18786":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:6146:2729":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11485:14633":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5939:14358":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8979:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:12052:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:13327:2177":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9110:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4383:2422":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11014:14570":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:38008:2120":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9790:14523":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:14439:18014":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3232:13447":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:16694:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44238:3546":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x1_t"],"kind":"struct"},"1:8892:2548":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:1094:14574":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15367:18772":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:34471:7079":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12536:14780":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:11179:7287":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:6005:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:34702:2329":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:37522:6731":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44178:3540":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x4_t"],"kind":"struct"},"5:1685:28250":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:403:18995":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:673:2149":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13896:17978":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:261:30366":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2472:13423":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5798:14354":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12486:14787":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:7140:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","siginfo_t"],"kind":"struct"},"5:7468:2248":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12872:14495":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1505:2157":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12930:14551":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:51993:3639":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x2x3_t"],"kind":"struct"},"9:0:1889":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10322:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"15:0:1894":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:1534:2149":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1439:2150":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5696:14349":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4740:2407":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:34968:7060":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:44985:3616":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x1x3_t"],"kind":"struct"},"6:7467:11747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7451:2105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:7004:28289":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:800:2154":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2911:19224":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:3936:2391":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7196:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","align","ucontext_t"],"kind":"struct"},"17:16160:18957":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"15:327:13369":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13961:17983":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7391:14407":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44246:3547":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x1_t"],"kind":"struct"},"1:8274:2372":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:3345:6835":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6043:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11755:14721":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"13:0:1886":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:364:29636":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:14359:18008":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10293:2330":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4831:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:12031:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7736:14427":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:26107:14444":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:35937:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6268:30092":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"14:7:13340":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:11998:6760":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:37604:6740":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:15301:18765":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:37904:6773":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:11356:19101":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1603:13333":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6944:29960":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:886:2174":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10793:2289":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5148:11582":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13448:17477":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3670:2375":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12746:14544":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4920:26331":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15535:18781":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:7901:2148":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:12051:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6893:30105":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:45448:2631":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2562:29623":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:37983:6758":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:8205:14443":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15294:18764":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:16185:25577":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:4703:2432":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8011:2344":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12032:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:15918:7144":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:2504:13424":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:1785:7040":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7536:11756":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:37060:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15710:18793":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:1286:2166":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:37644:6769":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:15268:2588":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7848:2285":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4855:11549":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:5395:2502":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44625:3580":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x4x3_t"],"kind":"struct"},"6:685:8057":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44586:3576":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x16x2_t"],"kind":"struct"},"2:37051:2305":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9896:6693":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:1054:2165":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:1567:2171":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:563:6754":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1741:8912":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9100:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6879:14396":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:7504:2357":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:1819:2225":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:2197:14607":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10881:14558":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:2788:13436":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:38495:2583":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7436:14408":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6401:14377":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:45066:3624":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x2x2_t"],"kind":"struct"},"6:1601:8899":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:357:2115":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:533:2095":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:44895:3607":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x4x3_t"],"kind":"struct"},"2:26826:7115":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8563:2495":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4963:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44655:3583":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x8x3_t"],"kind":"struct"},"6:6078:12256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47711:2654":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:1072:2167":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4444:28252":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3339:6836":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:1477:2152":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:1025:2165":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:2722:13433":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:36001:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4776:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:45662:2651":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"11:2548:29631":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12758:14545":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:15943:17458":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:52003:3640":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x2x4_t"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:34401:7066":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:15244:18759":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44695:3587":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x4x4_t"],"kind":"struct"},"1:918:2158":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4717:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6998:2462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","stat"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:34926:2534":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:45096:3627":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x1x2_t"],"kind":"struct"},"2:34513:7081":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:16098:18952":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:34439:7076":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4547:11518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4560:11520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5431:2504":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3160:23582":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13584:17963":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6543:2539":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45893:2640":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4924:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:15013:18739":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8829:2511":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6145:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5972:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"9:393:13207":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:844:2160":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:16445:2387":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3112:2185":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10807:6734":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6259:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:7752:7062":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15980:18943":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6753:14392":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5099:11577":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5500:2505":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:37822:6743":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7529:14519":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:38435:7273":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11454:19078":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4580:11523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:3584:14704":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:520:7996":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:45693:2598":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:12463:6753":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:4719:14054":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:9836:2241":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:14346:18007":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12220:14549":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7041:30159":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5650:6818":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:6194:19280":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:616:18983":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:8115:14437":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:16911:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6425:14379":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3022:7125":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7651:14422":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6013:12253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:1917:2170":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:446:30949":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:26128:7182":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:2972:6668":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:47425:2642":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11563:14635":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:12046:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13695:14725":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44496:3567":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x8x2_t"],"kind":"struct"},"2:26219:2033":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:33376:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9972:19050":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5381:2501":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:710:2157":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12127:14738":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:2670:13431":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11426:14659":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5952:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4519:11515":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4585:13992":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:47173:2636":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:15345:18770":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:16123:18954":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:47315:2607":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:536:30061":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15117:18748":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:15432:18775":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15671:18790":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:26139:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13948:17982":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:9888:6687":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5928:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10925:14561":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:328:29621":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:3012:7117":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4053:13628":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4807:11543":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5029:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:13054:26340":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3764:13459":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:12224:7280":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:36274:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI128"],"kind":"struct"},"16:5905:14357":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:256:30215":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:44535:3571":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x16x3_t"],"kind":"struct"},"17:14413:18012":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:7455:11745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:4928:14792":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:16329:25673":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:16170:17466":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:36826:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:44346:3553":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x8_t"],"kind":"struct"},"2:34491:7080":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4625:2396":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:34128:6879":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45045:3622":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x1x3_t"],"kind":"struct"},"17:13407:17474":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15659:18789":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46290:25582":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7136:24956":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3980:2394":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:5639:2545":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:586:8004":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11727:14699":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1007:2164":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6915:14398":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14470:18016":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:26138:2032":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11767:14722":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4939:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3425:2293":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:3049:13445":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7307:2176":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44616:3579":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x4x2_t"],"kind":"struct"},"2:10103:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7435:2146":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15267:18761":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:880:2153":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12396:14739":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:557:2097":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2954:2106":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:6862:6819":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15337:18769":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4921:14088":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4020:2154":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:17035:2386":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13707:17967":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10758:19003":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:8851:2149":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:8195:14442":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3241:2353":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:1627:8902":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8404:2489":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:3217:2170":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8353:2409":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:38196:6789":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:13272:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4609:11526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:5992:2528":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6023:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6279:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:27423:7119":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:16062:18949":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:16270:25541":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:10539:2348":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13273:17464":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4497:13976":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44665:3584":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x8x4_t"],"kind":"struct"},"16:149:13392":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12366:14773":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12029:14687":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3127:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4511:11514":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6200:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6960:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10520:30733":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:45115:3629":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x1x4_t"],"kind":"struct"},"1:10579:2100":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:10248:7243":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:538:7999":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12418:14791":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:1873:2239":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45745:2610":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:1887:2151":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:914:2157":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6929:14399":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12054:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:4505:6851":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6090:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:7748:7063":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15680:18791":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3737:2151":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:16087:18951":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:4480:11511":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8921:2549":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2662:2343":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4774:14061":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9651:14520":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15507:18778":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46707:2606":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"2:10314:26314":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:1131:28367":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44526:3570":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x16x2_t"],"kind":"struct"},"9:507:13209":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:36079:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11991:14680":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:6495:25579":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:5363:14338":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4639:19042":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:10987:2512":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:14945:26995":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2284:13387":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:16756:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:1550:2168":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:12043:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:13223:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7508:11753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4978:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11690:14718":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:16003:2296":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5816:29809":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:34919:7054":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:14904:18722":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:37850:6771":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:38427:7271":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:8097:14436":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9197:22818":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13491:17480":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:14933:26982":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:4266:6857":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:38637:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:44796:3597":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x2x2_t"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45025:3620":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x2x4_t"],"kind":"struct"},"1:4311:2428":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:10725:2331":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10016:14492":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:37035:2303":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:33668:20788":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:33316:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13976:17984":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4820:11545":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:4514:6852":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:14757:18726":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1577:8897":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:26121:6850":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:5435:30168":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:32000:7130":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10813:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:516:18984":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:12514:6780":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:35807:2475":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10841:21446":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:28138:7126":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11113:14568":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10510:14534":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:281:2034":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44409:3558":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x2_t"],"kind":"struct"},"18:0:1897":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:38295:6794":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5183:11587":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5054:11573":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7473:11748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4697:11534":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:38131:6787":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2202:2266":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7597:29868":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4949:14092":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:34430:7075":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14485:14507":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:12037:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:5344:28250":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4382:11503":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13724:17968":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3358:25979":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:15235:18758":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44545:3572":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x16x4_t"],"kind":"struct"},"17:13334:17469":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1734:2418":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1536:2188":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:15142:2586":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:7785:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1538:2151":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:46471:2641":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:2231:13324":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:13162:17458":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11126:14567":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:37512:6733":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:7277:2151":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2380:13419":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:564:8001":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:37494:6730":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:12004:2131":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11065:14575":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6352:14373":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14373:18009":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:17480:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:7923:2342":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5064:11574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3199:2350":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7474:14410":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12718:14543":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:10248:2515":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"14:160:13340":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:44685:3586":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x4x3_t"],"kind":"struct"},"2:33299:2202":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:26137:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11412:14605":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:45993:2599":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15287:18763":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7022:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","stat64"],"kind":"struct"},"16:2696:13432":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4411:2312":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10775:14539":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7862:14432":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10988:14572":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:12208:7278":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4634:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4566:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:903:2155":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:34935:7056":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12230:14732":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:33474:7135":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:15062:18743":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2659:6899":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:2443:2154":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:45560:2603":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:37954:2327":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:5753:2531":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:2169:14647":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:7525:11755":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:6872:6820":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12560:14815":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:10035:14340":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4386:6842":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1024:28250":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4406:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:1910:2169":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:430:29643":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:8001:19199":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1087:29641":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14509:18018":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:1203:14582":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4641:14000":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:44466:3564":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x16x2_t"],"kind":"struct"},"16:6721:14391":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1568:8896":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:2183:28391":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7026:21439":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11519:6736":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:36118:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:7103:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","user_regs_struct"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14041:17988":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:506:7994":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8494:2492":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:15543:2593":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:4986:14105":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:35701:2374":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:7190:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","align","max_align_t"],"kind":"struct"},"17:11549:14664":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44905:3608":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x4x4_t"],"kind":"struct"},"2:10880:6741":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10969:19166":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:24321:7108":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12166:14735":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:35782:2149":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:46783:2618":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:526:7997":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6070:21638":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6545:14386":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:35659:2372":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12380:14774":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15177:18752":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4557:13988":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8232:2376":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"0:3:1771":{"crate_id":0,"path":["simple_public","Public"],"kind":"trait"},"11:2469:2155":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:6531:14385":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7511:2247":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5830:14355":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:922:2159":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:7112:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","ipc_perm"],"kind":"struct"},"16:5648:14346":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5877:2154":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"15:394:13376":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10763:22823":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5322:14321":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11817:14723":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10726:30196":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:2600:21633":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4647:11531":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:34912:25115":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:9898:6694":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:621:2122":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3201:2351":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5083:11576":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45015:3619":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x2x3_t"],"kind":"struct"},"16:6792:14393":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:15692:2589":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47627:2669":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:496:30945":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4700:2459":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2618:13429":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1758:2208":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3994:2396":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:12034:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:583:18989":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46817:2668":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:24513:25788":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:45055:3623":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x1x4_t"],"kind":"struct"},"2:7112:7064":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:2144:2090":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11216:21451":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13202:17460":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14426:18013":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:537:18986":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:573:8002":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3500:2294":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:15087:18745":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:34098:25685":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8226:2377":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8308:2431":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:37082:25588":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46547:2653":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"14:215:13349":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12045:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:16383:25664":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:35852:7216":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:3837:2380":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10339:22504":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:15904:2725":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:37275:7260":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4678:11533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:35869:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13684:14724":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"9:450:13206":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:6687:28250":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:44766:3594":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x8x2_t"],"kind":"struct"},"1:11606:19345":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:37768:6775":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5419:14341":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8330:2462":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:16016:18946":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:9468:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:6430:2535":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4953:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10941:14562":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:15270:2587":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11041:14537":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12387:14775":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11291:21622":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:4419:11506":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47503:2613":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:6843:6818":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:44445:3562":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x8x3_t"],"kind":"struct"},"17:12510:14785":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:24911:6895":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:8921:2477":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:36157:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:3830:13477":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9559:14494":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:7827:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4729:11537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:47673:2619":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10559:14535":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14633:18723":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:8167:14440":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:34370:2200":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1670:8905":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44133:3538":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x8_t"],"kind":"struct"},"5:4092:2150":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:2383:2149":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:16047:2717":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:7717:2129":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44755:3593":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x4x4_t"],"kind":"struct"},"16:6600:14389":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1040:2164":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13463:17478":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"6:4901:11555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10102:14497":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6386:14376":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:7317:28316":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13322:17468":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:46753:2612":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2658:2296":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:45075:3625":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x2x3_t"],"kind":"struct"},"2:16787:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6253:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:34532:7083":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7568:14418":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:7843:2288":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2423:2151":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:16367:25755":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15631:18787":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:849:2150":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12039:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:34950:7057":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:3988:2395":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:14843:18731":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2832:13438":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11945:14682":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:3888:13511":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:37686:2330":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7102:14404":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:832:2156":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:5154:2528":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12091:14763":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:6117:2312":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:24337:6684":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1944:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:36835:6684":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:1796:2219":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:645:2126":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:44515:3569":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x8x4_t"],"kind":"struct"},"1:9070:19365":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15566:18784":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44646:3582":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x8x2_t"],"kind":"struct"},"6:4641:11530":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:51984:3638":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x2x2_t"],"kind":"struct"},"2:34150:6768":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4381:6841":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:14001:17986":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15527:18780":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6696:13359":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1063:2166":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2548:13426":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:36040:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:2304:2164":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:3255:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:16254:25600":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:3191:2169":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:7218:7072":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4755:11539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:6484:7069":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:16238:25573":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1891:2154":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:44676:3585":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x4x2_t"],"kind":"struct"},"6:6151:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:44865:3604":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x2x3_t"],"kind":"struct"},"1:859:2151":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:35773:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10768:6747":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:3032:13444":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4377:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10315:14493":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:619:8009":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11523:14636":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4031:2312":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4707:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:687:2150":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:37999:6767":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7479:11749":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10533:2350":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10716:14538":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:10785:30348":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10096:19267":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:7708:14425":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:527:18985":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4167:2425":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15868:18941":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:371:30964":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:16321:25702":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12153:14736":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6346:14372":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4395:11504":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:9892:6696":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:45492:2632":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:1315:2167":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:237:2490":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:34941:2358":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:836:2149":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:9187:22811":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:9027:19222":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15645:18788":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3162:2203":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11594:6660":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6467:14381":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:102:29627":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11632:14668":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8552:2494":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:3482:2241":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:7126:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","shmid_ds"],"kind":"struct"},"13:229:29695":{"crate_id":13,"path":["std_detect","detect","os","auxvec","AuxVec"],"kind":"struct"},"5:2973:28371":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13882:17977":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:34712:7086":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15480:18776":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1749:8913":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:2369:13334":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:2228:14632":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:2154:28325":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:15356:18771":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15079:18744":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:787:2153":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2352:2271":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7660:14423":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12335:14507":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:3655:13451":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1765:8914":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10941:2229":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:3099:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:1821:2226":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13235:17462":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:2236:28753":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:26114:26959":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:10346:25340":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1301:2165":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44575:3575":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x8x4_t"],"kind":"struct"},"17:15733:18795":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:4635:19038":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:8985:2094":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:38274:6792":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:7644:2117":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5154:11583":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10852:14557":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7514:11754":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13742:17969":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:33303:7133":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:34392:7065":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12548:14779":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:14887:26987":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14887:18733":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11932:14684":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12244:14734":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11459:14661":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12445:14781":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:15027:18740":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44946:3612":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x4x2_t"],"kind":"struct"},"6:4615:11527":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:44916:3609":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x2x2_t"],"kind":"struct"},"2:13081:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2933:13442":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4534:2104":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46091:2617":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1541:2154":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:15580:26992":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:34218:6872":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:2554:29633":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8286:2430":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4861:11550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:36235:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11027:14569":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:939:2161":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:31945:7129":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:37614:6738":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:9890:6695":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5035:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:2151:2166":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:11968:7231":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4151:2423":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:123:7677":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12180:14766":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:37676:6762":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12828:14548":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:1760:2209":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:2339:13417":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14251:18001":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:2474:28362":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:35646:2381":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12040:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:36551:6696":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:2536:29620":{"crate_id":11,"path":["hashbrown","raw","neon","Group"],"kind":"struct"},"1:10536:2352":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:627:8010":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46161:2674":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1695:8907":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:462:25671":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11657:14670":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:928:2160":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:34075:6839":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13754:17970":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7029:28269":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8859:2553":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7054:30165":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:38102:6785":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13935:17981":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10918:6742":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:13032:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14156:17994":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5760:14353":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10242:14531":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:37569:6720":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14950:18737":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:7936:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3133:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:3328:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:44565:3574":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x8x3_t"],"kind":"struct"},"1:5571:2508":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11779:14678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11800:14698":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:10138:2302":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:14934:18736":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:24052:2382":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:37072:2490":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10532:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4587:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6131:12261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8239:14444":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:44163:3539":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x8_t"],"kind":"struct"},"16:7462:14409":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5916:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8992:19291":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:34410:7073":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15279:18762":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12356:14772":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:595:14519":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5017:14112":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:44455:3563":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x8x4_t"],"kind":"struct"},"2:44595:3577":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x16x3_t"],"kind":"struct"},"17:14455:18015":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44254:3548":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x1_t"],"kind":"struct"},"6:6956:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","sigaction"],"kind":"struct"},"1:8292:2421":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7643:2296":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:1902:2240":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:38148:6788":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12898:14550":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7331:2151":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:2983:28208":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:35476:2369":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:45847:2634":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:1676:29648":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:7880:2030":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:7235:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","int128","user_fpsimd_struct"],"kind":"struct"},"2:8247:2182":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:7560:6797":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"10:44:13316":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14266:18002":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:11984:7233":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5574:14342":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:5661:14347":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:26252:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:4344:13895":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:0:1892":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:37294:6723":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4127:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4933:11559":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:945:2162":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:6300:7089":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:7496:11751":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10813:30843":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11035:21643":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9759:14522":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2881:13440":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13436:17476":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7535:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4986:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:34462:7078":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:7738:2228":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:26640:7116":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44605:3578":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x16x4_t"],"kind":"struct"},"2:34185:6874":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12255:14768":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:2048:2189":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:3081:6677":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11226:14625":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:34138:6880":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:36537:6688":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2370:2277":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3323:2337":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:9886:6688":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:37922:6774":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:119:7676":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7582:14419":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:15253:18760":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1455:2151":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:401:14517":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:45538:2597":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:33398:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"9:330:13262":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1115:28816":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:37090:25721":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:44387:3556":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x4_t"],"kind":"struct"},"11:434:29644":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:9683:6685":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:4050:28250":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:481:30947":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"15:306:13365":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:9022:19196":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:34114:6877":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4821:2406":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:14399:18011":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10959:6745":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44475:3565":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x16x3_t"],"kind":"struct"},"1:12056:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13648:17965":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:575:18981":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:51963:3636":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x1x3_t"],"kind":"struct"},"18:454:6895":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:4738:6866":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5121:14144":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4613:13996":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13026:14821":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:4637:19040":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:44976:3615":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x1x2_t"],"kind":"struct"},"2:24883:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:12015:21442":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12115:14765":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11155:14596":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5384:14339":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:1789:2155":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:4450:6849":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:37543:6722":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6989:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","flock64"],"kind":"struct"},"2:36780:6684":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:16818:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4769:2390":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14194:17997":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10137:14528":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:80:18969":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7006:14402":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1527:8890":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13765:17971":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:15089:2591":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7284:2475":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8220:2327":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:38017:6768":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6964:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","statfs"],"kind":"struct"},"5:1424:2149":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:16018:2716":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3184:2149":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2354:2272":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7268:2186":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2997:2579":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9813:14524":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:38629:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4906:2457":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:15546:18782":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4465:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4471:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4835:14074":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:33332:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:2864:13439":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6318:14370":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4504:11513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:3460:14686":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3966:2393":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6583:14388":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:4182:2312":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8326:2460":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:36354:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8190:2328":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6117:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:24349:25655":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5727:14351":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13097:17455":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:34237:2250":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:9894:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6569:14387":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:774:2152":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:38451:7287":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:34448:25100":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6499:14383":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:6811:2584":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11345:14614":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2334:7144":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14497:18017":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:35928:2151":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:35798:2151":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10896:14559":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:10331:21633":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:6456:14380":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10471:30847":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14969:18721":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:2326:2165":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:11369:14612":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:7334:7052":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12048:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:16052:2715":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4878:11552":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:7580:21646":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44775:3595":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x8x3_t"],"kind":"struct"},"2:34086:6878":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:26103:24982":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:51973:3637":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x1x4_t"],"kind":"struct"},"14:202:6795":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:35539:25790":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8200:2329":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11958:14683":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15160:18751":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:9165:19355":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:51954:3635":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x1x2_t"],"kind":"struct"},"1:2518:2340":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:3607:2150":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:2403:2150":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:38680:2728":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14662:18724":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:7798:2031":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:12049:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:45006:3618":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int64x2x2_t"],"kind":"struct"},"17:15329:18768":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8867:2151":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6156:14364":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1728:8911":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3510:2322":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:45723:2604":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:37582:6721":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45514:2638":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:33252:6678":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"13:196:29723":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5008:11567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:38439:7274":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:45644:2645":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:514:7995":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:35493:2370":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:13234:2729":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7342:30132":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5941:12248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8873:2550":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2209:2268":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:1566:13331":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:9034:6752":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14181:17996":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:44556:3573":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x8x2_t"],"kind":"struct"},"9:486:13205":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7080:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","statvfs64"],"kind":"struct"},"5:7498:2246":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:2975:28209":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5051:19185":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:0:1895":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:34279:2251":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:12148:7279":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:45923:2646":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8536:2493":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1559:8895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:426:13208":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:15538:2296":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44505:3568":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x8x3_t"],"kind":"struct"},"2:15690:2296":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13365:17471":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5135:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:15961:17459":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:15557:18783":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:2810:13437":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:37503:6729":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1622:8901":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15101:18746":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:38619:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:51945:3634":{"crate_id":2,"path":["core","core_arch","aarch64","neon","float64x2_t"],"kind":"struct"},"5:7285:2175":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4527:11516":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2062:2190":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6279:14369":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11701:14719":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6901:14397":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11269:14577":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:34265:2249":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7544:14416":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12324:14771":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12191:14731":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:45126:3630":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x2x2_t"],"kind":"struct"},"2:31890:7128":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:605:18990":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:6605:2151":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:7865:2286":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:15972:7144":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:8253:7061":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12432:14782":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"14:221:13350":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:27012:7118":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2406:13420":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8386:2471":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:38328:6778":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10422:14533":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:15725:18794":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11538:2380":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13419:17475":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:34173:6873":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13182:17459":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"8:0:1888":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:435:13389":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14087:17990":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:12050:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13254:17463":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3491:22612":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12055:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1270:2164":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7524:6708":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10803:14540":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:8154:14439":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3797:13468":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12310:14761":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14921:18735":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:7564:2523":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:35510:2371":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:4103:25918":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12921:14507":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:1151:28817":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:35623:25700":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5403:14340":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46517:2647":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:9854:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:38080:6784":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4028:2397":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13989:17985":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46259:25694":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:6596:2542":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:1532:8891":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10954:2505":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:45763:2616":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:7482:25576":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45036:3621":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x1x2_t"],"kind":"struct"},"5:7368:2151":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"14:40:17457":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:2140:2165":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:482:21651":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10667:30191":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7513:14413":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8960:2533":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:2352:2166":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7492:14411":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8937:2552":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"14:0:1893":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:123:29625":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:78:13184":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:12448:6752":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"9:52:13225":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:266:28250":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1552:8894":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14312:18005":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:2703:28754":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10962:14581":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:363:2116":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:4381:28252":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:44220:3544":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x2_t"],"kind":"struct"},"1:8797:2509":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7635:6815":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7619:2155":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:8244:2178":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13285:17465":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3915:13514":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11341:19103":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12953:14504":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9105:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1663:8904":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4459:11508":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7792:14430":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9891:14498":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3123:2029":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11308:19258":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:4806:14069":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:27482:7121":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12797:14547":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11714:14677":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:16346:25666":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3603:2154":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:7689:2100":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6415:14378":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:883:2163":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4150:6673":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:0:1891":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"18:96:18970":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3366:2358":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4741:11538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13787:17972":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11371:19005":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11171:21449":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"10:36:29618":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:856:2161":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:16412:25679":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:44815:3599":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x2x4_t"],"kind":"struct"},"16:3461:13449":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44925:3610":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x2x3_t"],"kind":"struct"},"2:27792:7123":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:10077:2219":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:3130:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7523:14414":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44826:3600":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x4x2_t"],"kind":"struct"},"17:12596:14541":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5040:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:34562:7085":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:1883:2149":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7915:19278":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:5688:2312":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:5746:2530":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5161:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7490:11750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10172:14529":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:44427:3560":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x2_t"],"kind":"struct"},"17:12140:14737":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:10143:2304":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:6466:2541":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5116:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11399:14606":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:38722:6664":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11243:14611":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12659:14499":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:16146:18956":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:1495:2156":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:420:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:44955:3613":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x4x3_t"],"kind":"struct"},"2:16433:2384":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:14208:17998":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14282:18003":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:8181:14441":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12044:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10915:14560":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:579:8003":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:2031:14613":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:15568:2585":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44706:3588":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x8x2_t"],"kind":"struct"},"17:10067:14496":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6138:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:37992:6757":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:16109:18953":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13922:17980":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:6204:14365":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3410:6679":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:396:29634":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"0:0:1772":{"crate_id":0,"path":["simple_public"],"kind":"module"},"1:5971:2544":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14170:17995":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14989:14576":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:2644:13430":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5415:2503":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1545:8893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:436:18997":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:3753:2190":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4231:2427":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11743:14720":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:30014:7127":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5588:14343":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:4169:6838":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:2450:13422":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:38693:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14385:18010":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12052:14685":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6261:14368":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:12038:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4574:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6249:2544":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:9943:14505":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:32055:7131":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6083:13386":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10095:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"13:259:29651":{"crate_id":13,"path":["std_detect","detect","os","aarch64","AtHwcap"],"kind":"struct"},"2:46212:25719":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7838:2287":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:1897:25593":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:640:2125":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1713:8909":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:4773:14786":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:15003:18738":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:26067:2513":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4839:11547":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:592:18982":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4042:2399":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:12457:6754":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:34232:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"14:187:13348":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7347:28204":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8803:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5046:11572":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5612:14344":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:35840:2476":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11978:14679":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:486:30956":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12410:14776":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:38423:7272":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2305:13415":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:10432:30553":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:36853:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:600:8006":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:951:2163":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:12403:2496":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:35962:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:12053:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:15842:17455":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:32634:7132":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"7:31:13177":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:1906:7154":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2574:13427":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:9879:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:15224:18757":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:5877:7067":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:9538:26719":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:37804:6745":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13309:17467":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:45622:2639":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11620:13373":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:45592:2633":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7931:2189":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:34158:2120":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44715:3589":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x8x3_t"],"kind":"struct"},"17:11321:14537":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:4235:6856":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11145:2510":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:7540:19348":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15855:17456":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:4795:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11645:14669":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11194:14598":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11982:19229":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:4964:2467":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15903:18942":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:7380:22485":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:37043:25751":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:3318:7134":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:34500:7068":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:299:29628":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5890:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:37700:2331":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:1883:7155":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:8134:14438":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:16725:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:837:2159":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:6687:14390":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:8281:14445":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:35453:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:700:2151":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:357:13222":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:44308:3551":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly8x16_t"],"kind":"struct"},"2:15916:25368":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:4159:2424":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:38447:7269":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5673:14348":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:1923:2171":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:5593:2312":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:9095:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:212:6683":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2586:2341":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:4561:6853":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:27246:2580":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:393:18991":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9860:14525":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:35722:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11617:14667":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:46393:2635":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"14:165:13341":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:16294:2383":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14099:17991":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11307:14608":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:7063:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","statvfs"],"kind":"struct"},"2:44148:3537":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint8x8_t"],"kind":"struct"},"16:6226:14366":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:7722:14426":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47749:2675":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11497:14663":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:4469:2432":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:893:2154":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:37443:25122":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12972:14503":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:2542:26202":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11590:14631":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:6484:2154":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8815:2510":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4945:11561":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:511:14518":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10098:19194":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:9049:19152":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:34343:2290":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:5004:2312":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6818:14394":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:1538:8892":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:44211:3543":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x2_t"],"kind":"struct"},"1:11389:22827":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8905:2551":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1066:13328":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13663:17966":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4115:25809":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:38710:6666":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:15259:2296":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:7046:9020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","statfs64"],"kind":"struct"},"17:14765:18727":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2093:6680":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:4527:13982":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4050:2401":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3333:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45105:3628":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly64x1x3_t"],"kind":"struct"},"2:15889:2296":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:7461:11746":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:5995:14361":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7828:14431":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:3818:2155":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15311:18766":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14822:18730":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7754:2229":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7549:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:7376:2151":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:16973:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8477:2491":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5780:2532":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4038:2398":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14896:18734":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8843:2512":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:38285:6793":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:15589:18785":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:594:8005":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4492:11512":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46313:25587":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7782:14429":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:742:2158":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7090:30162":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:46967:2601":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11198:2300":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:7297:2154":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11486:6735":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:2993:7094":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10803:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10974:14577":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:10823:2291":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:37670:6763":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2426:1904":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12264:14769":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:1142:13330":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:34960:7058":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5898:12244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1486:2153":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:34249:25576":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12584:14783":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:15958:2726":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14221:17999":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3002:2581":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1722:8910":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7554:14417":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3239:2352":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:34548:7084":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:7613:14420":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:611:8008":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10781:19007":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7318:14406":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:45468:2596":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1589:8898":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:10973:6743":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10051:14341":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:34192:6875":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5634:14345":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:15865:2722":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:8207:2330":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13856:17975":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14778:18728":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:7906:2147":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:14145:17993":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:387:18994":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:588:2118":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:10987:6746":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3738:2189":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11613:13373":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:2979:28207":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:40:2204":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6610:2543":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:45085:3626":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x2x4_t"],"kind":"struct"},"5:2256:28410":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:4252:2149":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:16849:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6513:14384":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:16004:18945":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13504:17481":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44935:3611":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x2x4_t"],"kind":"struct"},"16:2428:13421":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:15087:2296":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11604:14666":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:36810:25693":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:38431:7275":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13383:17472":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:27619:7122":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13218:17461":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:46137:2673":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1705:8908":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:33213:6834":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7158:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","seccomp_notif_sizes"],"kind":"struct"},"2:44262:3549":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int8x16_t"],"kind":"struct"},"1:9148:2578":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:44418:3559":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint64x2_t"],"kind":"struct"},"1:3280:2349":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:6490:25605":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"13:237:29700":{"crate_id":13,"path":["std_detect","detect","os","cpuinfo","CpuInfoField"],"kind":"struct"},"17:13869:17976":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"9:177:13311":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:11999:22486":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4999:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:508:30948":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2596:13428":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:38672:2727":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:7205:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","align","mcontext_t"],"kind":"struct"},"17:12301:14770":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5075:11575":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5986:12208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2380:2282":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6159:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:16132:25571":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11256:14610":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1562:2170":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"15:288:13364":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:36544:6695":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4909:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:35851:2478":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:27364:7120":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:37750:6776":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5106:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:6530:28250":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4129:24955":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:38415:7267":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4798:2412":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:24407:25739":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6376:14375":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:16134:18955":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:7218:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","align","clone_args"],"kind":"struct"},"17:10569:30758":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46039:2605":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"13:102:29722":{"crate_id":13,"path":["std_detect","detect","arch","aarch64","Feature"],"kind":"enum"},"1:9480:21650":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6361:14374":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6189:30169":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5922:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14057:17989":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:5082:19185":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6896:21631":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12273:14548":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11052:21645":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44856:3603":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x2x2_t"],"kind":"struct"},"17:12103:14764":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12009:14537":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:16180:17468":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:558:8000":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13395:17473":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:12662:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11383:22817":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2766:13435":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14878:18732":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11141:14595":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15384:18774":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13478:17479":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44965:3614":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x4x4_t"],"kind":"struct"},"6:5171:11585":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6000:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8006:19200":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:33356:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:26164:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11046:21642":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:10156:19025":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:44725:3590":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint16x8x4_t"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4486:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12614:14542":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2744:13434":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11675:14717":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:15826:2721":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:1607:8900":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3251:2171":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:34350:6720":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11052:14538":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:10832:21443":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:14899:26987":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15689:18792":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12202:14767":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:45800:2672":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45782:2666":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4742:2410":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4862:14077":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14235:18000":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6960:14400":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:44398:3557":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","float32x4_t"],"kind":"struct"},"1:7599:21636":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:24315:6814":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9918:14526":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:38117:6786":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3163:22195":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10337:14532":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6485:14382":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:38507:7288":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:44200:3542":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x4_t"],"kind":"struct"},"2:7789:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13809:17973":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:38735:25714":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:35790:2150":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6560:30121":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:3251:14681":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12999:14820":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3166:22194":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13909:17979":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11215:14599":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:35850:2132":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11395:14619":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:3600:13450":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:5764:7077":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:1160:2167":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:9884:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7245:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5712:14350":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4212:2312":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7067:29753":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:37658:6766":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:9351:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:7097:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","aarch64","pthread_attr_t"],"kind":"struct"},"2:44875:3605":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x2x4_t"],"kind":"struct"},"17:11439:14626":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4659:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:3494:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"4:0:1887":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:24281:2184":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44635:3581":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int16x4x4_t"],"kind":"struct"},"1:12036:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:14931:26991":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:8050:14434":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:62:7622":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:3230:28307":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10431:2509":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3594:2149":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15192:18754":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12784:14546":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2336:7145":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4597:11525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44886:3606":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","uint32x4x2_t"],"kind":"struct"},"1:8974:19332":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10618:30756":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12290:14760":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1516:2158":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:9129:2300":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2830:2244":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:10700:2150":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11449:14660":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15200:18755":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:5088:14135":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:14698:18725":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15990:18944":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5177:11586":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6332:14371":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8546:2149":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14786:18729":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:6540:2538":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:44785:3596":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","poly16x8x4_t"],"kind":"struct"},"5:3225:2168":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3732:2379":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:13106:6903":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7559:13161":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:16306:25596":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7128:14405":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13347:17470":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1681:8906":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7534:14415":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:44835:3601":{"crate_id":2,"path":["core","core_arch","arm_shared","neon","int32x4x3_t"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}